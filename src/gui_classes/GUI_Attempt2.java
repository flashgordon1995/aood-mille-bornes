/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_classes;

import baseclasses.Card;
import baseclasses.Game;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;

/**
 *
 * @author xtian8741
 */
public class GUI_Attempt2 extends javax.swing.JFrame implements Runnable {
    
    private Game game;
    
    private Thread t;
    private boolean stopFlag;
    
    private MouseDragHandler cardDragHandler;
    private GameComponent gameComponent;

    /**
     * Creates new form GUI_Attempt2
     */
    public GUI_Attempt2() {
        initComponents();
        
        game = new Game();
        game.drawAllCards();
        
        cardDragHandler = new MouseDragHandler();
        gameComponent = new GameComponent();
        gameComponent.setPreferredSize(new Dimension(Game.WIDTH, Game.HEIGHT));
        
        rootPane.setLayout(new BorderLayout());
        rootPane.add(gameComponent, BorderLayout.CENTER);
        
        startLoop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Attempt2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Attempt2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Attempt2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Attempt2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI_Attempt2().setVisible(true);
            }
        });
    }

    private void startLoop() {
        stopFlag = true;
        t = new Thread(this, "Game Loop");
    }

    @Override
    public void run() {
        while (stopFlag) {
            getUserAction();
            repaint();
            getAIMove();
            repaint();
        }
    }
    
    private void getUserAction() {
        while (true) {
            
        }
    }
    
    private void getAIMove() {
        
    }
    
    private class MouseDragHandler extends MouseAdapter {
        private boolean isDone;
        private int card;
        private final Object lock = new Object();
        
        public MouseDragHandler() {
            super();
            isDone = false;
        }
        
        @Override
        public void mouseDragged(MouseEvent me) {
            synchronized(lock) {
                isDone = false;
            }
            
            System.out.println("Drag");
            
            card = Integer.parseInt(me.getComponent().getName().substring(4));
            me.getComponent().setBounds(me.getXOnScreen(), me.getYOnScreen(), Card.CARD_WIDTH, Card.CARD_HEIGHT);
        }
        
        @Override
        public void mouseReleased(MouseEvent me) {
            synchronized(lock) {
                isDone = true;
            }
        }
        
        public boolean isDone() {
            synchronized(lock) {
                return isDone;
            }
        }
        
        public void reset() {
            synchronized(lock) {
                isDone = false;
            }
        }
    }
    
    private class GameComponent extends JComponent {
        @Override
        public void paintComponent(Graphics g) {
            JComponent tableaus = game.getComponent();
            add(tableaus);
            
            for (int i = 0; i < game.getPlayerHandSize(); i++) {
                JLabel card = game.getCardLabel(i);
                card.setName("Card" + i);
                card.addMouseListener(cardDragHandler);
                card.addMouseMotionListener(cardDragHandler);
                
                add(card);
                card.setBounds(20 + (Card.CARD_WIDTH + 10) * i, 4 * Card.CARD_HEIGHT + 50, Card.CARD_WIDTH, Card.CARD_HEIGHT);
            }
            
            tableaus.setBounds(0, 0, (Card.CARD_WIDTH + 10) * 4, Card.CARD_HEIGHT*2 + 10);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
